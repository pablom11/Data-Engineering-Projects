Description: This template has been created to setup the Airflow Workshop Environment on EE, and it deploys the following resources VPC, S3, MWAA, Redshift and relevant IAM roles

Resources:
  #Create a Virtual Private Cloud (Required for MWAA env)
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.192.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MWAA-Workshop

  # Create an Internet Gateway to allow internet access
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MWAA-Workshop
  
  # Attach the Internet Gateway to the VPC
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Create two public subnets in different Availability Zones
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.192.10.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MWAA-Workshop Public Subnet (AZ1)

  # Creating another public subnet in a different Availability Zone for high availability.
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.192.11.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: MWAA-Workshop Public Subnet (AZ2)

  # Create two private subnets in different Availability Zones
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: 10.192.20.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: MWAA-Workshop Private Subnet (AZ1)

  # Creating another private subnet in a different Availability Zone for high availability.
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock: 10.192.21.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: MWAA-Workshop Private Subnet (AZ2)

  # Create Elastic IPs for NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
  
  # Creating a second Elastic IP for the second NAT Gateway.
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  # Create NAT Gateways for the private subnets
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  # Creating a second NAT Gateway for high availability in a different Availability Zone.
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  # Create a route table for the public subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MWAA-Workshop Public Routes

  # Create a default route to the Internet Gateway for the public route table
  # This route sends all traffic (0.0.0.0/0) from the public subnets to the Internet Gateway.
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate public subnets with the public route table
  # This associates the public route table with PublicSubnet1.
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # This associates the public route table with PublicSubnet2.
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Create route tables for the private subnets
  # A route table for the private subnet in the first Availability Zone.
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MWAA-Workshop Private Routes (AZ1)

  # Create a default route to the NAT Gateway for the first private route table
  # This route sends all traffic from the private subnet to the NAT Gateway in the first Availability Zone.
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  # Associate the first private subnet with the first private route table
  # This associates the first private route table with PrivateSubnet1.
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
  
  # A route table for the private subnet in the second Availability Zone.
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: MWAA-Workshop Private Routes (AZ2)
  
  # Create a default route to the NAT Gateway for the second private route table
  # This route sends all traffic from the private subnet to the NAT Gateway in the second Availability Zone.
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  
  # Associate the second private subnet with the second private route table
  # This associates the second private route table with PrivateSubnet2.
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
  
  # Create a security group with no ingress rules (no inbound traffic)
  # This security group allows no inbound traffic.
  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC

  # Create IAM roles for Glue, EMR, Redshift, SageMaker
  
  #Glue Service Role
  AWSGlueServiceRoleDefault:
    Properties:
      RoleName: AWSGlueServiceRoleDefault
      AssumeRolePolicyDocument:
      # Allow Glue service to assume this role
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
      # Attach necessary policies to the role
        - 'arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
    Type: 'AWS::IAM::Role'
    DeletionPolicy: Delete

  # SageMaker execution role for Airflow
  AirflowSageMakerExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: AirflowSageMakerExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        # Allow SageMaker service to assume this role
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      # Attach necessary policies to the role
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
    DeletionPolicy: Delete

  # Redshift service role
  AmazonMWAAWorkshopRedshiftRole:
    Properties:
      RoleName: AmazonMWAA-workshop-redshift-role
      AssumeRolePolicyDocument:
      # Allow Redshift service to assume this role
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - redshift.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
      # Attach necessary policies to the role
        - 'arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
    Type: 'AWS::IAM::Role'
    DeletionPolicy: Delete

  # EMR service role
  EMRDefaultRole:
    Properties:
      RoleName: EMR_DefaultRole
      AssumeRolePolicyDocument:
      # Allow EMR service to assume this role
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - elasticmapreduce.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      # Attach necessary policies to the role
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
    Type: 'AWS::IAM::Role'
    DeletionPolicy: Delete

  # EMR EC2 instance profile role
  EMREC2DefaultRole:
    Properties:
      RoleName: EMR_EC2_DefaultRole
      # Allow EC2 service to assume this role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
      # Attach necessary policies to the role
        - 'arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
    Type: 'AWS::IAM::Role'
    DeletionPolicy: Delete
  
  # Assign a specific IAM role (EMREC2DefaultRole) to all the EC2 instances that are part of the EMR cluster
  EMRClusterinstanceProfile:
      Type: 'AWS::IAM::InstanceProfile'
      Properties:
        InstanceProfileName: "EMR_EC2_DefaultRole"
        Path: "/"
        Roles:
          -
            Ref: EMREC2DefaultRole

  # Create S3 BUCKET, and setup folders plus copy required objects using Lambda
  EnvironmentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join [ '-', [ airflow, !Select [2, !Split ['/', !Ref AWS::StackId]], bucket ] ] 
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  # Custom resource to create directories in the S3 bucket
  S3CustomResource:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt AWSLambdaFunction.Arn
      the_bucket: !Ref EnvironmentBucket
      dirs_to_create: [ dags, data, plugins, requirements, scripts, scripts/emr, scripts/glue ]
  
  # Lambda function to handle S3 bucket operations
  AWSLambdaFunction:
     Type: "AWS::Lambda::Function"
     Properties:
       Description: "Work with S3 Buckets!"
       FunctionName: !Join [ '-', [ !Select [2, !Split ['/', !Ref AWS::StackId]], lambda ] ] 
       Handler: index.handler
       Role: !GetAtt AWSLambdaExecutionRole.Arn
       Timeout: 360
       Runtime: python3.9
       Code:
         ZipFile: |
          import boto3
          import cfnresponse
          def handler(event, context):
              # Init ...
              the_event = event['RequestType']
              print("The event is: ", str(the_event))
              response_data = {}
              s_3 = boto3.client('s3')
              # Retrieve parameters
              the_bucket = event['ResourceProperties']['the_bucket']
              dirs_to_create = event['ResourceProperties']['dirs_to_create']

              try:
                  if the_event in ('Create', 'Update'):
                      print("Requested folders: ", str(dirs_to_create))
                      for dir_name in dirs_to_create:
                          print("Creating: ", str(dir_name))
                          s_3.put_object(Bucket=the_bucket,
                                         Key=(dir_name
                                              + '/'))
                      copy_req_object = {'Bucket': 'ws-assets-prod-iad-r-iad-ed304a55c2ca1aee', 'Key': '795e88bb-17e2-498f-82d1-2104f4824168/requirements/requirements_263.txt'}
                      s_3.copy_object(CopySource=copy_req_object, Bucket=the_bucket, Key='requirements/requirements_263.txt')

                  elif the_event == 'Delete':
                      print("Deleting S3 content...")
                      b_operator = boto3.resource('s3')
                      b_operator.Bucket(str(the_bucket)).objects.all().delete()
                  # Everything OK... send the signal back
                  print("Execution succesfull!")
                  cfnresponse.send(event,
                                   context,
                                   cfnresponse.SUCCESS,
                                   response_data)
              except Exception as e:
                  print("Execution failed...")
                  print(str(e))
                  response_data['Data'] = str(e)
                  cfnresponse.send(event,
                                   context,
                                   cfnresponse.FAILED,
                                   response_data)
  # IAM role for the Lambda function
  AWSLambdaExecutionRole:
     Type: AWS::IAM::Role
     Properties:
       AssumeRolePolicyDocument:
         Statement:
         - Action:
           - sts:AssumeRole
           Effect: Allow
           Principal:
             Service:
             - lambda.amazonaws.com
         Version: '2012-10-17'
       Path: "/"
       Policies:
       - PolicyDocument:
           Statement:
           - Action:
             - logs:CreateLogGroup
             - logs:CreateLogStream
             - logs:PutLogEvents
             Effect: Allow
             Resource: arn:aws:logs:*:*:*
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-CW
       - PolicyDocument:
           Statement:
           - Action:
             - s3:PutObject
             - s3:DeleteObject
             - s3:GetObject
             - s3:List*
             Effect: Allow
             Resource: '*'
           Version: '2012-10-17'
         PolicyName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambda-S3
       RoleName: !Sub ${AWS::StackName}-${AWS::Region}-AWSLambdaExecutionRole

  # Create the Amazon Managed Workflows for Apache Airflow (MWAA) environment
  # Create a security group for the MWAA environment
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC # Reference to the VPC where the security group will be created
      GroupDescription: Security Group for Amazon MWAA Environment Airflow-Workshop-Environment
      GroupName: airflow-security-group-Airflow-Workshop-Environment
  
  # Inbound rules for the security group
  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1" # Allow all protocols
      SourceSecurityGroupId: !Ref SecurityGroup # Allow traffic from the same security group

  # Outbound rules for the security group
  SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref SecurityGroup
      IpProtocol: "-1" # Allow all protocols
      CidrIp: "0.0.0.0/0" # Allow outbound traffic to any destination

  # Execution role for MWAA environment
  MwaaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - airflow-env.amazonaws.com
                - airflow.amazonaws.com
            Action:
             - "sts:AssumeRole"
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AWSGlueConsoleFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonS3FullAccess'
        - 'arn:aws:iam::aws:policy/AmazonElasticMapReduceFullAccess'
        - 'arn:aws:iam::aws:policy/AmazonSageMakerFullAccess'   
        - 'arn:aws:iam::aws:policy/AmazonRedshiftFullAccess'     
      Path: "/service-role/"

  # Create a managed policy to grant additional permissions to the MWAA execution role
  MwaaExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref MwaaExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: airflow:PublishMetrics
            Resource:
              # - !GetAtt MwaaEnvironment.Arn
              - !Sub "arn:aws:airflow:${AWS::Region}:${AWS::AccountId}:environment/Airflow-Workshop-Environment-*"
          - Effect: Deny
            Action: s3:ListAllMyBuckets
            Resource:
              - !GetAtt EnvironmentBucket.Arn
              - !Sub "${EnvironmentBucket.Arn}/*"
          - Effect: Allow
            Action:
              - "s3:GetObject*"
              - "s3:GetBucket*"
              - "s3:List*"
            Resource:
              - !GetAtt EnvironmentBucket.Arn
              - !Sub "${EnvironmentBucket.Arn}/*"
          - Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:CreateLogGroup
              - logs:PutLogEvents
              - logs:GetLogEvents
              - logs:GetLogRecord
              - logs:GetLogGroupFields
              - logs:GetQueryResults
              - logs:DescribeLogGroups
            Resource:
              - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:airflow-Airflow-Workshop-Environment-*"
          - Effect: Allow
            Action: cloudwatch:PutMetricData
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:ChangeMessageVisibility
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ReceiveMessage
              - sqs:SendMessage
            Resource:
              - !Sub "arn:aws:sqs:${AWS::Region}:*:airflow-celery-*"
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - "kms:GenerateDataKey*"
              - kms:Encrypt
            NotResource: !Sub "arn:aws:kms:*:${AWS::AccountId}:key/*"
            Condition:
              StringLike:
                "kms:ViaService":
                  - !Sub "sqs.${AWS::Region}.amazonaws.com"

  MwaaEnvironment:
    DependsOn: 
      - MwaaExecutionPolicy
      - S3CustomResource
      - NatGateway1
      - NatGateway2
      - DefaultPrivateRoute1
      - DefaultPrivateRoute2
    Type: AWS::MWAA::Environment
    Properties:
      AirflowVersion: 2.6.3
      Name: !Join [ '-', [ Airflow-Workshop-Environment, !Select [2, !Split ['/', !Ref AWS::StackId]] ] ] 
      SourceBucketArn: !GetAtt EnvironmentBucket.Arn      
      ExecutionRoleArn: !GetAtt MwaaExecutionRole.Arn
      DagS3Path: dags
      RequirementsS3Path: requirements/requirements_263.txt
      AirflowConfigurationOptions: { "core.enable_xcom_pickling": "True"}
      LoggingConfiguration:
        DagProcessingLogs:
          Enabled: True
          LogLevel: INFO
        SchedulerLogs:
          Enabled: True
          LogLevel: INFO
        TaskLogs:
          Enabled: True
          LogLevel: INFO
        WebserverLogs:
          Enabled: True
          LogLevel: INFO
        WorkerLogs:
          Enabled: True
          LogLevel: INFO
      EnvironmentClass: mw1.small
      MaxWorkers: 4
      NetworkConfiguration:
        SecurityGroupIds:
          - !GetAtt SecurityGroup.GroupId
        SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      WebserverAccessMode: PUBLIC_ONLY

## br2
  # Create a Redshift cluster parameter group
  RedshiftClusterParameterGroup:
    Type: AWS::Redshift::ClusterParameterGroup
    Properties:
      Description: Cluster parameter group
      ParameterGroupFamily: redshift-1.0
      Parameters:
      # Enable user activity logging
      - ParameterName: enable_user_activity_logging
        ParameterValue: 'true'

  # Create a Redshift cluster subnet group
  RedshiftClusterSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Cluster subnet group
      SubnetIds:
      # Specify the subnets for the Redshift cluster
      - !Ref PublicSubnet1
      - !Ref PublicSubnet2

  # Create a security group for the Redshift cluster
  RedshiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group
      # Inbound rule allowing access to Redshift port (5439) from a specific CIDR range
      SecurityGroupIngress:
      - CidrIp: 10.192.0.0/16
        FromPort: 5439
        ToPort: 5439
        IpProtocol: tcp
      VpcId:
        Ref: VPC

  # Create a Secrets Manager secret for Redshift credentials
  RedshiftSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: This is the redshift instance secret
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: "\"'@/\\"
  
  # Create the Redshift cluster
  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    DependsOn: InternetGatewayAttachment
    Properties:
      ClusterType: multi-node
      NumberOfNodes: 2
      NodeType: ra3.xlplus
      DBName: dev
      MasterUsername: 
        Fn::Sub: "{{resolve:secretsmanager:${RedshiftSecret}::username}}"
      MasterUserPassword: 
        Fn::Sub: "{{resolve:secretsmanager:${RedshiftSecret}::password}}"
      ClusterParameterGroupName:
        Ref: RedshiftClusterParameterGroup
      VpcSecurityGroupIds:
      - Ref: RedshiftSecurityGroup
      ClusterSubnetGroupName:
        Ref: RedshiftClusterSubnetGroup
      IamRoles: 
        - !GetAtt AmazonMWAAWorkshopRedshiftRole.Arn
      PubliclyAccessible: 'true'
      Port: 5439
  
  # Attach the secret to the Redshift cluster
  SecretRedshiftAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId:
        Ref: RedshiftSecret
      TargetId:
        Ref: RedshiftCluster
      TargetType: AWS::Redshift::Cluster  

# Outputs section to provide useful information
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
  ClusterEndpoint:
    Description: Cluster endpoint
    Value: !Sub "${RedshiftCluster.Endpoint.Address}:${RedshiftCluster.Endpoint.Port}"
  S3Bucket:
    Description: The S3 Bucket ARN
    Value: !Ref EnvironmentBucket      

